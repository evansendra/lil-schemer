The following pattern of numbers is called Pascal's triangle.

1             1
2           1   1
3         1   2   1
4       1   3   3   1
5     1   4   6   4   1
6   1   5   10   10  5  1
7 1   6   15  20  15   6  1

1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
1 6 15 20 15 6 1


The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it. Write a procedure that computes elements of Pascal's triangle by means of a recursive process.

----

main strategies I'm thinking of right now:

1 keep track of lparent, rparent, lsib, rsib, n, and then somehow compute the children -> problem -> for left child, how do we compute it's lsib?
2 use math properties of the tree's even and odd rows to compute left and right children -> looks like it would get complex pretty quickly
3 compute a triangle at a time where the input is the apex and the output is the bottom three nodes left, center right

e.g.

XXX
(define (compute-triangle n l r)
  (cond ((= l 0) (compute-triangle 1 0 (+ n r)))
        ((= r 0) (compute-triangle 1 (+ n l) 0))
        (else (compute-triangle (+ l r) ))))
XXX

(define (pascal r c)
  ...)
^ follow this to start at some point in the tree, recurse upward til we hit the top and propagate back down
