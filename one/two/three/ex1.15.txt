A.  HOW MANY TIMES IS THE PROCEDURE P APPLIED WHEN (SINE 12.15) IS EVALUATED?

(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
   (if (not (> (abs angle) 0.1))
       angle
       (p (sine (/ angle 3.0)))))

(sine 12.15)

(p (sine (/ 12.15 3.0)))
(p (sine 4.05))
(p (p (sine (/ 4.05 3.0))))
(p (p (sine 1.35)))
(p (p (p (sine (/ 1.35 3.0)))))
(p (p (p (sine 0.45))))
(p (p (p (p (sine (/ 0.45 3.0))))))
(p (p (p (p (sine 0.15)))))
(p (p (p (p (p (sine (/ 0.15 3.0)))))))
(p (p (p (p (p (sine 0.05)))))) -> max recursion depth
(p (p (p (p (p 0.05)))))
(p (p (p (p .1495...))))
(p (p (p .435...)))
(p (p .976...))
(p -.7895...)
;Value: -.39980345741334

as we can see, at max recursion depth, p is applied 5 times.

B.  WHAT IS THE ORDER OF GROWTH IN SPACE AND NUMBER OF STEPS (AS A FUNCTION OF a) USED BY THE PROCESS GENERATED BY THE SINE PROCEDURE WHEN (sine a) IS EVALUATED?

the order of growth in terms of space is proportional to the number of applications of p which we need to keep in the list of applications to be done.  This depends upon how many divisions into 3.0 must be done until a is less than 0.1 .  Since we have one application of recursion per recursive call, time will also grow proportionally to the number of calls needed until we hit our base case, which will be the number of divisions needed to reduce the angle below 0.1.  So the order of growth in terms of space and time can be shown as:

a/(3^n) <= 0.1 and a/(3^(n+1)) >= 0.1

(for walkthrough of the above, see: https://photos.app.goo.gl/snw5jN5BxrotNYgMA)

working this out gives

log base 3 (a/0.1) <= n <= log base 3 (a/0.1) + 1

which means

Time(a) = theta (log(a))
Space(a) = theta (log(a))
