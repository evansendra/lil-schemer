The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

**The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers.**

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

for this procedure such that x < 0.001 will produce bad results, because any guess at the sqrt which is within 0.001 of the actual sqrt will pass, even if the sqrt is significiantly smaller than the constant 0.001

Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers.

For very large numbers, sqrt procedure doesn't finish processing.  This is due to the fact that there is limited storage to hold the integer and decimal portion of the number.  For small numbers, this is not a problem, as the distance between two integers will be something very small (e.g. 0.000000000001), but for large numbers, it will eventually be that two consecutive floating point numbers will have a gap larger than 0.001.  For the number 12345678901234, sqrt as written runs indefinitely.  This is because at our current precision, the procedure gets to a very small difference between x = 12345678901234 and guess^2 = 12345678901234.??? but does not have enough room to hold the exact number of decimals we need behind the number, and our test fails abs( guess^2 - x ) = 0.001.
